// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int       @id @default(autoincrement())
  name       String
  surname    String
  email      String    @unique
  password   String
  tel        String
  idline     String?
  address    String
  role       Role      @default(ADMIN)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  bill       bill[]
  cart       Cart[]
}

model Storeitem {
  id          Int       @id @default(autoincrement())
  name        String
  discription String
  price       Int
  image       String?
  amount      Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  stock       stock[]
  cart        Cart[]
  isActive    Boolean
  cagetory_id  Int       // Reference to Cagetoy
  cagetory     Cagetory   @relation(fields: [cagetory_id], references: [id]) // Establish relation to Cagetoy
}

model Cagetory {
  id          Int         @id @default(autoincrement())
  name        String
  items       Storeitem[] // Reference to Storeitem
}


model bill {
  id         Int        @id @default(autoincrement())
  user       users      @relation(fields: [users_id], references: [id])
  users_id   Int
  stock      stock[]
  totalprice Float
  itemdetail Json
  status     Billstatus
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model stock {
  id          Int       @id @default(autoincrement())
  billuser    bill      @relation(fields: [billId], references: [id])
  billId      Int
  storeitem   Storeitem @relation(fields: [storeItemId], references: [id])
  storeItemId Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Cart {
  id          Int       @id @default(autoincrement())
  user        users     @relation(fields: [users_id], references: [id])
  users_id    Int
  storeitem   Storeitem @relation(fields: [storeItemId], references: [id])
  storeItemId Int
  quantity    Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

enum Billstatus {
  WAITING
  SUCCESS
  FAILED
}

enum Role {
  USER
  ADMIN
}
